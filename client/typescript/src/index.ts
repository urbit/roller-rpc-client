
// Code generated by @open-rpc/generator DO NOT EDIT.
import { RequestManager, PostMessageWindowTransport, PostMessageIframeTransport, WebSocketTransport, HTTPTransport, Client, JSONRPCError } from "@open-rpc/client-js";
import _ from "lodash";
import { OpenrpcDocument as OpenRPC, MethodObject, ContentDescriptorObject } from "@open-rpc/meta-schema";
import { MethodCallValidator, MethodNotFoundError } from "@open-rpc/schema-utils-js";

/**
 *
 * patp-encoded string with leading ~
 *
 * @default ~wanzod
 *
 */
export type Patp = string;
/**
 *
 * Number representing a ship
 *
 */
export type Number = number;
/**
 *
 * An Azimuth Ship
 *
 */
export type Ship = Patp | Number;
export type OwnershipAddress = string;
export type SpawnProxy = string;
export type VotingProxy = string;
export type ManagementProxy = string;
export type TransferProxy = string;
export type Proxy = OwnershipAddress | SpawnProxy | VotingProxy | ManagementProxy | TransferProxy;
/**
 *
 * hex encoded address
 *
 */
export type EthAddress = string;
export type Reset = boolean;
/**
 *
 * ^0x[0-9a-f]{64}$
 *
 */
export type Crypto = string;
/**
 *
 * ^0x[0-9a-f]{64}$
 *
 */
export type Auth = string;
export type CryptoSuite = string;
export type Breach = boolean;
export interface TransferPointParams {
  address: EthAddress;
  reset?: Reset;
  [k: string]: any;
}
export interface SpawnParams {
  address: EthAddress;
  ship: Ship;
  [k: string]: any;
}
export interface ConfigureKeysParams {
  encrypt: Crypto;
  auth: Auth;
  cryptoSuite: CryptoSuite;
  breach: Breach;
  [k: string]: any;
}
export interface SponsorshipParams {
  ship: Ship;
  [k: string]: any;
}
export interface AddressParams {
  address: EthAddress;
  [k: string]: any;
}
/**
 *
 * One of: l1, l2, spawn
 *
 */
export type Dominion = string;
export type Life = string;
export interface Keys {
  life: Life;
  suite: CryptoSuite;
  auth: Auth;
  crypto: Crypto;
  [k: string]: any;
}
export type Rift = string;
export type Has = boolean;
export interface Sponsor {
  has?: Has;
  who?: Ship;
  [k: string]: any;
}
export interface Networking {
  keys: Keys;
  rift: Rift;
  sponsor: Sponsor;
  escape?: Ship;
  [k: string]: any;
}
export type Nonce = number;
export interface ProxyObject {
  address?: EthAddress;
  nonce?: Nonce;
  [k: string]: any;
}
export interface Ownership {
  owner?: ProxyObject;
  spawnProxy?: ProxyObject;
  managementProxy?: ProxyObject;
  votingProxy?: ProxyObject;
  transferProxy?: ProxyObject;
  [k: string]: any;
}
/**
 *
 * If true, forces the Roller to include this transaction, even if it fails to validate.
 *
 */
export type Force = boolean;
/**
 *
 * Hex-encoded signature
 *
 */
export type Signature = string;
/**
 *
 * Ship that sends the transaction and type of Ethereum address that controls it
 *
 */
export interface From {
  ship: Ship;
  proxy: Proxy;
  [k: string]: any;
}
/**
 *
 * Data requiered for a L2 Transaction
 *
 */
export type L2Data = TransferPointParams | SpawnParams | ConfigureKeysParams | SponsorshipParams | AddressParams;
/**
 *
 * Raw L2 transaction as defined in /lib/naive.hoon
 *
 */
export interface L2Transaction {
  sig: Signature;
  from: From;
  tx: L2Data;
  [k: string]: any;
}
export type Timestamp = number;
/**
 *
 * Pending transaction in the Roller, waiting to be submitted to the Blockchain
 *
 */
export interface PendingTransaction {
  forced: Force;
  rawTx?: L2Transaction;
  address: EthAddress;
  time?: Timestamp;
  [k: string]: any;
}
/**
 *
 * One of: confirmed, pending, sending, confirmed, failed, unknown
 *
 */
export type TransactionStatus = string;
/**
 *
 * One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy
 *
 */
export type TransactionType = string;
export type Hash32 = string;
export interface RollerTransaction {
  ship?: Ship;
  status?: TransactionStatus;
  type?: TransactionType;
  hash?: Hash32;
  time?: Timestamp;
  [k: string]: any;
}
/**
 *
 * Timestamp of when the next roll of L2 txs will be sent out
 *
 */
export type NextBatch = number;
/**
 *
 * How often the Roller sends out a new batch
 *
 */
export type Frequency = number;
/**
 *
 * How ofthen the Roller retries to send a batch
 *
 */
export type RollerResendTime = number;
/**
 *
 * How ofthen the Roller updates its state
 *
 */
export type RollerUpdateRate = number;
/**
 *
 * How often the Azimuth agent checks for L1 updates
 *
 */
export type AzimuthRefreshRate = number;
/**
 *
 * For more info: https://chainid.network/
 *
 */
export type ChainId = number;
export type DNS = string;
export interface L2Point {
  dominion?: Dominion;
  network?: Networking;
  ownership?: Ownership;
  [k: string]: any;
}
export interface NaivePoint {
  ship?: Ship;
  point?: L2Point;
  [k: string]: any;
}
export type NaivePoints = NaivePoint[];
export type OperatorAddress = string;
export type OperatorAddresses = EthAddress[];
export interface Operator {
  operator?: OperatorAddress;
  addresses?: OperatorAddresses;
  [k: string]: any;
}
export type Operators = Operator[];
/**
 *
 * A list of DNS
 *
 */
export type ListOfDNS = DNS[];
export type Residents = Ship[];
export type SponsorRequests = Ship[];
/**
 *
 * Keccak-256 (not the standardized SHA3-256) of the given data.
 *
 */
export type Hash = string;
export type Ships = Ship[];
export type ListOfPendingTxs = PendingTransaction[];
export type SpawnedPoints = Number[];
export type UnspawnedPoints = Number[];
export type SpawnsLeft = number;
export type TransactionHistory = RollerTransaction[];
/**
 *
 * Always returns "ok"
 *
 */
export type Success = string;
/**
 *
 * A Roller Config
 *
 */
export interface Config {
  nextBatch: NextBatch;
  frequency: Frequency;
  rollerResendTime: RollerResendTime;
  rollerUpdateRate: RollerUpdateRate;
  azimuthRefreshRate: AzimuthRefreshRate;
  chainId: ChainId;
  contract: EthAddress;
  [k: string]: any;
}
export type SerializedTx = string;
/**
 *
 * L2 Naive State
 *
 */
export interface NaiveState {
  points: NaivePoints;
  operators: Operators;
  dns: ListOfDNS;
  [k: string]: any;
}
export interface SponsoredPoints {
  residents?: Residents;
  requests?: SponsorRequests;
  [k: string]: any;
}
export type RemainingQuota = number;
export type Allowance = number;
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfShipEthAddressSignatureForceFromEthAddressTransferPointParamsSignatureForceFromEthAddressSpawnParamsSignatureForceFromEthAddressConfigureKeysParamsSignatureForceFromEthAddressSponsorshipParamsSignatureForceFromEthAddressSponsorshipParamsSignatureForceFromEthAddressSponsorshipParamsSignatureForceFromEthAddressSponsorshipParamsSignatureForceFromEthAddressSponsorshipParamsSignatureForceFromEthAddressAddressParamsSignatureForceFromEthAddressAddressParamsSignatureForceFromEthAddressAddressParamsShipEthAddressHashShipShipShipHash32EthAddressFromSignatureForceHash32TransactionTypeShipSignatureForceFromTransactionTypeL2DataNonceFromTransactionTypeL2DataNonceFromTransactionTypeL2DataNonceFromTransactionTypeL2DataEthAddressEthAddressEthAddressEthAddressEthAddressShipShipShipL2PointShipsHashHashHashHashHashHashHashHashHashHashHashListOfPendingTxsListOfPendingTxsListOfPendingTxsPendingTransactionSpawnedPointsUnspawnedPointsSpawnsLeftNextBatchTimestampTransactionStatusTransactionHistoryNonceSuccessConfigListOfDNSHashHashHashSerializedTxShipsShipsShipsShipsShipsNaiveStateNaiveStateSponsoredPointsRemainingQuotaAllowance = Ship | EthAddress | Signature | Force | From | TransferPointParams | SpawnParams | ConfigureKeysParams | SponsorshipParams | AddressParams | Hash | Hash32 | TransactionType | L2Data | Nonce | L2Point | Ships | ListOfPendingTxs | PendingTransaction | SpawnedPoints | UnspawnedPoints | SpawnsLeft | NextBatch | Timestamp | TransactionStatus | TransactionHistory | Success | Config | ListOfDNS | SerializedTx | NaiveState | SponsoredPoints | RemainingQuota | Allowance;
export type GetPoint = (ship: Ship) => Promise<L2Point>;
export type GetShips = (address: EthAddress) => Promise<Ships>;
export type TransferPoint = (sig: Signature, force: Force, from: From, address: EthAddress, data: TransferPointParams) => Promise<Hash>;
export type Spawn = (sig: Signature, force: Force, from: From, address: EthAddress, data: SpawnParams) => Promise<Hash>;
export type ConfigureKeys = (sig: Signature, force: Force, from: From, address: EthAddress, data: ConfigureKeysParams) => Promise<Hash>;
export type Escape = (sig: Signature, force: Force, from: From, address: EthAddress, data: SponsorshipParams) => Promise<Hash>;
export type CancelEscape = (sig: Signature, force: Force, from: From, address: EthAddress, data: SponsorshipParams) => Promise<Hash>;
export type Adopt = (sig: Signature, force: Force, from: From, address: EthAddress, data: SponsorshipParams) => Promise<Hash>;
export type Detach = (sig: Signature, force: Force, from: From, address: EthAddress, data: SponsorshipParams) => Promise<Hash>;
export type Reject = (sig: Signature, force: Force, from: From, address: EthAddress, data: SponsorshipParams) => Promise<Hash>;
export type SetManagementProxy = (sig: Signature, force: Force, from: From, address: EthAddress, data: AddressParams) => Promise<Hash>;
export type SetSpawnProxy = (sig: Signature, force: Force, from: From, address: EthAddress, data: AddressParams) => Promise<Hash>;
export type SetTransferProxy = (sig: Signature, force: Force, from: From, address: EthAddress, data: AddressParams) => Promise<Hash>;
export type GetAllPending = () => Promise<ListOfPendingTxs>;
export type GetPendingByShip = (ship: Ship) => Promise<ListOfPendingTxs>;
export type GetPendingByAddress = (address: EthAddress) => Promise<ListOfPendingTxs>;
export type GetPendingTx = (hash: Hash) => Promise<PendingTransaction>;
export type GetSpawned = (ship: Ship) => Promise<SpawnedPoints>;
export type GetUnspawned = (ship: Ship) => Promise<UnspawnedPoints>;
export type SpawnsRemaining = (ship: Ship) => Promise<SpawnsLeft>;
export type WhenNextBatch = () => Promise<NextBatch>;
export type WhenNextSlice = () => Promise<Timestamp>;
export type GetTransactionStatus = (hash: Hash32) => Promise<TransactionStatus>;
export type GetHistory = (address: EthAddress) => Promise<TransactionHistory>;
export type GetNonce = (from: From) => Promise<Nonce>;
export type CancelTransaction = (sig: Signature, force: Force, hash: Hash32, type: TransactionType, ship: Ship) => Promise<Success>;
export type GetRollerConfig = () => Promise<Config>;
export type GetDns = () => Promise<ListOfDNS>;
export type HashRawTransaction = (sig: Signature, force: Force, from: From, tx: TransactionType, data: L2Data) => Promise<Hash>;
export type HashTransaction = (nonce: Nonce, from: From, tx: TransactionType, data: L2Data) => Promise<Hash>;
export type GetUnsignedTx = (nonce: Nonce, from: From, tx: TransactionType, data: L2Data) => Promise<Hash>;
export type PrepareForSigning = (nonce: Nonce, from: From, tx: TransactionType, data: L2Data) => Promise<SerializedTx>;
export type GetOwnedPoints = (address: EthAddress) => Promise<Ships>;
export type GetTransferringFor = (address: EthAddress) => Promise<Ships>;
export type GetManagerFor = (address: EthAddress) => Promise<Ships>;
export type GetVotingFor = (address: EthAddress) => Promise<Ships>;
export type GetSpawningFor = (address: EthAddress) => Promise<Ships>;
export type GetNaiveState = () => Promise<NaiveState>;
export type GetPredictedState = () => Promise<NaiveState>;
export type GetSponsoredPoints = (ship: Ship) => Promise<SponsoredPoints>;
export type GetRemainingQuota = (ship: Ship) => Promise<RemainingQuota>;
export type GetAllowance = (ship: Ship) => Promise<Allowance>;

export interface Options {
  transport: {
    type: "websocket" | "http" | "https" | "postmessagewindow" | "postmessageiframe";
    host: string;
    port: number;
    path?: string;
    protocol?: string;
  },
}

export class RollerRPCAPI {
  public rpc: Client;
  public static openrpcDocument: OpenRPC = {"openrpc":"1.2.6","info":{"version":"0.1.16","title":"Roller RPC API","license":{"name":"MIT"}},"servers":[{"url":"http://localhost:8080/v1/roller","name":"Roller Local","description":"This assumes `%roller-rpc.hoon` running on a test ship"},{"url":"http://localhost:8080/v1/azimuth","name":"Azimuth Local","description":"This assumes `%azimuth-rpc.hoon` running on a test ship"},{"url":"https://roller-tmp.urbit.org/v1/roller","name":"Roller Ropsten","description":"Roller Agent on Ropsten"},{"url":"https://roller-tmp.urbit.org/v1/azimuth","name":"Azimuth Ropsten","description":"Azimuth agent on Ropsten"},{"url":"https://roller.urbit.org/v1/roller","name":"Roller Mainnet","description":"Roller Agent on Mainnet"},{"url":"https://roller.urbit.org/v1/azimuth","name":"Azimuth Mainnet","description":"Azimuth agent on Mainnet"}],"methods":[{"name":"getPoint","summary":"Retrieves Azimuth Point data for a specific ship","tags":[{"name":"point"}],"paramStructure":"by-name","params":[{"name":"ship","description":"The @p of the planet (e.g. `~sampel-planet` or 256)","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"point","description":"Expected response to be a valid request","schema":{"title":"L2Point","type":"object","properties":{"dominion":{"type":"string","title":"Dominion","description":"One of: l1, l2, spawn"},"network":{"title":"Networking","type":"object","required":["keys","rift","sponsor"],"properties":{"keys":{"title":"Keys","type":"object","required":["life","suite","auth","crypto"],"properties":{"life":{"type":"string","title":"Life"},"suite":{"type":"string","title":"CryptoSuite"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"crypto":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"}}},"rift":{"type":"string","title":"Rift"},"sponsor":{"title":"Sponsor","type":"object","properties":{"has":{"type":"boolean","title":"has"},"who":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"escape":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"ownership":{"title":"Ownership","type":"object","properties":{"owner":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"spawnProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"managementProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"votingProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"transferProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}}}}}}}},{"name":"getShips","summary":"Returns all the ships controlled by an ethereum address","paramStructure":"by-name","params":[{"name":"address","summary":"Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}],"result":{"name":"points","schema":{"type":"array","title":"Ships","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}},{"name":"transferPoint","summary":"Transfers a point to an ethereum address","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"spawn","summary":"Spawns a ship to an Ethereum Address","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"configureKeys","summary":"Configure Keys","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"escape","summary":"Request escaping to a different sponsor","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"cancelEscape","summary":"Cancel request to escape","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"adopt","summary":"Adopt ship","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"detach","summary":"Detach ship","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"reject","summary":"Reject ship","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"setManagementProxy","summary":"Set Management Proxy","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"setSpawnProxy","summary":"Set Spawn Proxy","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"setTransferProxy","summary":"Set Transfer Proxy","tags":[{"name":"transaction"}],"paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}},{"name":"data","schema":{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}}],"result":{"name":"txHash","description":"Hash of the raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"getAllPending","summary":"Gets all pending transactions in the roller","tags":[{"name":"pending"}],"paramStructure":"by-name","params":[],"result":{"name":"pending-transaction","description":"List of pending transactions","schema":{"type":"array","title":"List of pending txs","items":{"title":"PendingTransaction","type":"object","description":"Pending transaction in the Roller, waiting to be submitted to the Blockchain","required":["forced","tx","address"],"properties":{"forced":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"},"rawTx":{"title":"L2Transaction","type":"object","description":"Raw L2 transaction as defined in /lib/naive.hoon","required":["sig","tx","from"],"properties":{"sig":{"type":"string","title":"Signature","description":"Hex-encoded signature"},"from":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}},"tx":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}},"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"time":{"title":"Timestamp","type":"number"}}}}}},{"name":"getPendingByShip","summary":"Gets all pending transactions in the roller, by ship","tags":[{"name":"pending"}],"paramStructure":"by-name","params":[{"name":"ship","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"pending-transaction","description":"List of pending transactions","schema":{"type":"array","title":"List of pending txs","items":{"title":"PendingTransaction","type":"object","description":"Pending transaction in the Roller, waiting to be submitted to the Blockchain","required":["forced","tx","address"],"properties":{"forced":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"},"rawTx":{"title":"L2Transaction","type":"object","description":"Raw L2 transaction as defined in /lib/naive.hoon","required":["sig","tx","from"],"properties":{"sig":{"type":"string","title":"Signature","description":"Hex-encoded signature"},"from":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}},"tx":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}},"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"time":{"title":"Timestamp","type":"number"}}}}}},{"name":"getPendingByAddress","summary":"Gets all pending transactions in the roller, by address","tags":[{"name":"pending"}],"paramStructure":"by-name","params":[{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}],"result":{"name":"pending-transaction","description":"List of pending transactions","schema":{"type":"array","title":"List of pending txs","items":{"title":"PendingTransaction","type":"object","description":"Pending transaction in the Roller, waiting to be submitted to the Blockchain","required":["forced","tx","address"],"properties":{"forced":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"},"rawTx":{"title":"L2Transaction","type":"object","description":"Raw L2 transaction as defined in /lib/naive.hoon","required":["sig","tx","from"],"properties":{"sig":{"type":"string","title":"Signature","description":"Hex-encoded signature"},"from":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}},"tx":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}},"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"time":{"title":"Timestamp","type":"number"}}}}}},{"name":"getPendingTx","summary":"Gets the pending transaction in the roller that corresponds to the given hash ","tags":[{"name":"pending"}],"paramStructure":"by-name","params":[{"name":"hash","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}],"result":{"name":"pending-transaction","description":"Pending transaction","schema":{"title":"PendingTransaction","type":"object","description":"Pending transaction in the Roller, waiting to be submitted to the Blockchain","required":["forced","tx","address"],"properties":{"forced":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"},"rawTx":{"title":"L2Transaction","type":"object","description":"Raw L2 transaction as defined in /lib/naive.hoon","required":["sig","tx","from"],"properties":{"sig":{"type":"string","title":"Signature","description":"Hex-encoded signature"},"from":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}},"tx":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}},"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"time":{"title":"Timestamp","type":"number"}}}}},{"name":"getSpawned","summary":"Gets all spawned points by a star or galaxy","paramStructure":"by-name","params":[{"name":"ship","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"spawned points","description":"List of points as numbers","schema":{"type":"array","title":"SpawnedPoints","items":{"type":"number","title":"Number","description":"Number representing a ship"}}}},{"name":"getUnspawned","summary":"Gets all points that haven't been spawned by a star or galaxy","paramStructure":"by-name","params":[{"name":"ship","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"unspawned points","description":"List of points as numbers","schema":{"type":"array","title":"UnspawnedPoints","items":{"type":"number","title":"Number","description":"Number representing a ship"}}}},{"name":"spawnsRemaining","summary":"Returns the number of points that haven't been spawned by a star or galaxy","paramStructure":"by-name","params":[{"name":"ship","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"spawns remaining","description":"Number of spawns the point has left","schema":{"type":"number","title":"SpawnsLeft"}}},{"name":"whenNextBatch","summary":"Timestamp of when the next L2 batch will be submitted","paramStructure":"by-name","params":[],"result":{"name":"Next batch","schema":{"title":"NextBatch","type":"number","description":"Timestamp of when the next roll of L2 txs will be sent out"}}},{"name":"whenNextSlice","summary":"Timestamp of when the quota for submitting L2 transactions will be reset","paramStructure":"by-name","params":[],"result":{"name":"Next slice","schema":{"title":"Timestamp","type":"number"}}},{"name":"getTransactionStatus","summary":"Status of an L2 transaction submitted to the Roller","paramStructure":"by-name","params":[{"name":"hash","schema":{"title":"hash32","type":"string","pattern":"^0x[0-9a-f]{64}$"}}],"result":{"name":"Status","schema":{"title":"TransactionStatus","type":"string","description":"One of: confirmed, pending, sending, confirmed, failed, unknown"}}},{"name":"getHistory","summary":"Returns status, hash and type of all L2 tx submitted by an ethereum address,","paramStructure":"by-name","params":[{"name":"address","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}],"result":{"name":"L2 Transactions","schema":{"type":"array","title":"TransactionHistory","items":{"type":"object","title":"RollerTransaction","properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"status":{"title":"TransactionStatus","type":"string","description":"One of: confirmed, pending, sending, confirmed, failed, unknown"},"type":{"type":"string","title":"TransactionType","description":"One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy"},"hash":{"title":"hash32","type":"string","pattern":"^0x[0-9a-f]{64}$"},"time":{"title":"Timestamp","type":"number"}}}}}},{"name":"getNonce","summary":"Latest nonce (counting pending transactions) for the proxy of the given ship","paramStructure":"by-name","params":[{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}}],"result":{"name":"Nonce","schema":{"type":"number","title":"Nonce"}}},{"name":"cancelTransaction","summary":"Cancels a transaction that hasn't been sent out","paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"hash","schema":{"title":"hash32","type":"string","pattern":"^0x[0-9a-f]{64}$"}},{"name":"type","schema":{"type":"string","title":"TransactionType","description":"One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy"}},{"name":"ship","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"success","description":"Success response","schema":{"title":"Success","type":"string","description":"Always returns \"ok\""}}},{"name":"getRollerConfig","summary":"Returns configuration parameters of the Roller","paramStructure":"by-name","params":[],"result":{"name":"Configuration","schema":{"title":"Config","description":"A Roller Config","type":"object","required":["nextBatch","frequency","rollerResendTime","azimuthRefreshRate","rollerUpdateRate","chainId","contract"],"properties":{"nextBatch":{"title":"NextBatch","type":"number","description":"Timestamp of when the next roll of L2 txs will be sent out"},"frequency":{"type":"number","title":"Frequency","description":"How often the Roller sends out a new batch"},"rollerResendTime":{"type":"number","title":"RollerResendTime","description":"How ofthen the Roller retries to send a batch"},"rollerUpdateRate":{"type":"number","title":"RollerUpdateRate","description":"How ofthen the Roller updates its state"},"azimuthRefreshRate":{"type":"number","title":"AzimuthRefreshRate","description":"How often the Azimuth agent checks for L1 updates"},"chainId":{"type":"number","title":"ChainId","description":"For more info: https://chainid.network/"},"contract":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}}},{"name":"getDns","summary":"Naive Rollup DNSs","paramStructure":"by-name","params":[],"result":{"name":"List of Rollup DNS","schema":{"title":"ListOfDNS","description":"A list of DNS","type":"array","items":{"type":"string","title":"DNS"}}}},{"name":"hashRawTransaction","summary":"Returns the hash of the serialized signature and raw bytes of the l2 tx. Used as unique identifier of a tx submitted to a L2 roller","paramStructure":"by-name","params":[{"name":"sig","schema":{"type":"string","title":"Signature","description":"Hex-encoded signature"}},{"name":"force","schema":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"tx","schema":{"type":"string","title":"TransactionType","description":"One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy"}},{"name":"data","schema":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}],"result":{"name":"Hash","description":"Hash of the signature + L2 raw transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"hashTransaction","deprecated":true,"summary":"DEPRECATED: Currently equivalent to prepareForSigning.","paramStructure":"by-name","params":[{"name":"nonce","schema":{"type":"number","title":"Nonce"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"tx","schema":{"type":"string","title":"TransactionType","description":"One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy"}},{"name":"data","schema":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}],"result":{"name":"Hash","description":"Hash of the L2 transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"getUnsignedTx","deprecated":true,"summary":"Returns a hash of the unsigned L2 transaction, following the format found at https://urbit.org/docs/azimuth/l2/bytestring#unsigned","paramStructure":"by-name","params":[{"name":"nonce","schema":{"type":"number","title":"Nonce"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"tx","schema":{"type":"string","title":"TransactionType","description":"One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy"}},{"name":"data","schema":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}],"result":{"name":"Hash","description":"Hash of the L2 transaction","schema":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."}}},{"name":"prepareForSigning","deprecated":true,"summary":"Returns a serialized L2 transaction, with the appropiate headers, and reversed endianness. Useful to be used together with, for example, Metamask personal_sign method","paramStructure":"by-name","params":[{"name":"nonce","schema":{"type":"number","title":"Nonce"}},{"name":"from","schema":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}}},{"name":"tx","schema":{"type":"string","title":"TransactionType","description":"One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy"}},{"name":"data","schema":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}],"result":{"name":"SerializedTx","description":"Hex-encoded string representation of the L2 transaction","schema":{"title":"SerializedTx","type":"string"}}},{"name":"getOwnedPoints","summary":"Returns all the ships controlled by an ethereum address as owner proxy","paramStructure":"by-name","params":[{"name":"address","summary":"Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}],"result":{"name":"points","schema":{"type":"array","title":"Ships","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}},{"name":"getTransferringFor","summary":"Returns all the ships controlled by an ethereum address as transfer proxy","paramStructure":"by-name","params":[{"name":"address","summary":"Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}],"result":{"name":"points","schema":{"type":"array","title":"Ships","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}},{"name":"getManagerFor","summary":"Returns all the ships controlled by an ethereum address as manage proxy","paramStructure":"by-name","params":[{"name":"address","summary":"Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}],"result":{"name":"points","schema":{"type":"array","title":"Ships","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}},{"name":"getVotingFor","summary":"Returns all the ships controlled by an ethereum address as voting proxy","paramStructure":"by-name","params":[{"name":"address","summary":"Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}],"result":{"name":"points","schema":{"type":"array","title":"Ships","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}},{"name":"getSpawningFor","summary":"Returns all the ships controlled by an ethereum address as spawn proxy","paramStructure":"by-name","params":[{"name":"address","summary":"Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26","schema":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}],"result":{"name":"points","schema":{"type":"array","title":"Ships","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}},{"name":"getNaiveState","summary":"Naive State","paramStructure":"by-name","params":[],"result":{"name":"Naive State","schema":{"title":"NaiveState","description":"L2 Naive State","type":"object","required":["points","operators","dns"],"properties":{"points":{"type":"array","title":"NaivePoints","items":{"type":"object","title":"NaivePoint","properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"point":{"title":"L2Point","type":"object","properties":{"dominion":{"type":"string","title":"Dominion","description":"One of: l1, l2, spawn"},"network":{"title":"Networking","type":"object","required":["keys","rift","sponsor"],"properties":{"keys":{"title":"Keys","type":"object","required":["life","suite","auth","crypto"],"properties":{"life":{"type":"string","title":"Life"},"suite":{"type":"string","title":"CryptoSuite"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"crypto":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"}}},"rift":{"type":"string","title":"Rift"},"sponsor":{"title":"Sponsor","type":"object","properties":{"has":{"type":"boolean","title":"has"},"who":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"escape":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"ownership":{"title":"Ownership","type":"object","properties":{"owner":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"spawnProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"managementProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"votingProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"transferProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}}}}}}}}},"operators":{"type":"array","title":"Operators","items":{"type":"object","title":"Operator","properties":{"operator":{"type":"string","title":"OperatorAddress"},"addresses":{"type":"array","title":"OperatorAddresses","items":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}}},"dns":{"title":"ListOfDNS","description":"A list of DNS","type":"array","items":{"type":"string","title":"DNS"}}}}}},{"name":"getPredictedState","summary":"Predicted Naive State","paramStructure":"by-name","params":[],"result":{"name":"Predicted Naive State","schema":{"title":"NaiveState","description":"L2 Naive State","type":"object","required":["points","operators","dns"],"properties":{"points":{"type":"array","title":"NaivePoints","items":{"type":"object","title":"NaivePoint","properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"point":{"title":"L2Point","type":"object","properties":{"dominion":{"type":"string","title":"Dominion","description":"One of: l1, l2, spawn"},"network":{"title":"Networking","type":"object","required":["keys","rift","sponsor"],"properties":{"keys":{"title":"Keys","type":"object","required":["life","suite","auth","crypto"],"properties":{"life":{"type":"string","title":"Life"},"suite":{"type":"string","title":"CryptoSuite"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"crypto":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"}}},"rift":{"type":"string","title":"Rift"},"sponsor":{"title":"Sponsor","type":"object","properties":{"has":{"type":"boolean","title":"has"},"who":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"escape":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"ownership":{"title":"Ownership","type":"object","properties":{"owner":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"spawnProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"managementProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"votingProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"transferProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}}}}}}}}},"operators":{"type":"array","title":"Operators","items":{"type":"object","title":"Operator","properties":{"operator":{"type":"string","title":"OperatorAddress"},"addresses":{"type":"array","title":"OperatorAddresses","items":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}}},"dns":{"title":"ListOfDNS","description":"A list of DNS","type":"array","items":{"type":"string","title":"DNS"}}}}}},{"name":"getSponsoredPoints","summary":"Retrieves sponsees of the given ship, together with a list of points requesting to be sponsored","tags":[{"name":"point"}],"paramStructure":"by-name","params":[{"name":"ship","description":"The @p of the ponsor (e.g. `~sampel-planet` or 256)","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"points","description":"Expected response to be a valid request","schema":{"title":"SponsoredPoints","type":"object","properties":{"residents":{"type":"array","title":"Residents","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}},"requests":{"type":"array","title":"SponsorRequests","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}}}},{"name":"getRemainingQuota","summary":"Retrieves current number of L2 transactions this ship is allowed to send to the Roller","paramStructure":"by-name","params":[{"name":"ship","description":"The @p of the planet (e.g. `~sampel-planet` or 256)","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"remaining quota","description":"Remaining L2 quota","schema":{"type":"number","title":"RemainingQuota"}}},{"name":"getAllowance","summary":"Retrieves number of L2 transactions this ship is allowed to send to the Roller, per time slice","paramStructure":"by-name","params":[{"name":"ship","description":"The @p of the planet (e.g. `~sampel-planet` or 256)","schema":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}],"result":{"name":"Allowance","description":"Ship Allowance, per time slice","schema":{"type":"number","title":"Allowance"}}}],"components":{"schemas":{"eth-address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"hash32":{"title":"hash32","type":"string","pattern":"^0x[0-9a-f]{64}$"},"Point":{"title":"L2Point","type":"object","properties":{"dominion":{"type":"string","title":"Dominion","description":"One of: l1, l2, spawn"},"network":{"title":"Networking","type":"object","required":["keys","rift","sponsor"],"properties":{"keys":{"title":"Keys","type":"object","required":["life","suite","auth","crypto"],"properties":{"life":{"type":"string","title":"Life"},"suite":{"type":"string","title":"CryptoSuite"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"crypto":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"}}},"rift":{"type":"string","title":"Rift"},"sponsor":{"title":"Sponsor","type":"object","properties":{"has":{"type":"boolean","title":"has"},"who":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"escape":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"ownership":{"title":"Ownership","type":"object","properties":{"owner":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"spawnProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"managementProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"votingProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"transferProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}}}}}},"SponsoredPoints":{"title":"SponsoredPoints","type":"object","properties":{"residents":{"type":"array","title":"Residents","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}},"requests":{"type":"array","title":"SponsorRequests","items":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}}},"Ownership":{"title":"Ownership","type":"object","properties":{"owner":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"spawnProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"managementProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"votingProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"transferProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}}}},"Keys":{"title":"Keys","type":"object","required":["life","suite","auth","crypto"],"properties":{"life":{"type":"string","title":"Life"},"suite":{"type":"string","title":"CryptoSuite"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"crypto":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"}}},"CryptoSuite":{"type":"string","title":"CryptoSuite"},"Auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"Crypto":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"Networking":{"title":"Networking","type":"object","required":["keys","rift","sponsor"],"properties":{"keys":{"title":"Keys","type":"object","required":["life","suite","auth","crypto"],"properties":{"life":{"type":"string","title":"Life"},"suite":{"type":"string","title":"CryptoSuite"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"crypto":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"}}},"rift":{"type":"string","title":"Rift"},"sponsor":{"title":"Sponsor","type":"object","properties":{"has":{"type":"boolean","title":"has"},"who":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"escape":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"Sponsor":{"title":"Sponsor","type":"object","properties":{"has":{"type":"boolean","title":"has"},"who":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"Nonce":{"type":"number","title":"Nonce"},"ProxyObject":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"Dominion":{"type":"string","title":"Dominion","description":"One of: l1, l2, spawn"},"Signature":{"type":"string","title":"Signature","description":"Hex-encoded signature"},"From":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}},"TransferPointParams":{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},"SpawnParams":{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"ConfigureKeysParams":{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},"SponsorshipParams":{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"AddressParams":{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}},"TransactionStatus":{"title":"TransactionStatus","type":"string","description":"One of: confirmed, pending, sending, confirmed, failed, unknown"},"TransactionType":{"type":"string","title":"TransactionType","description":"One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy"},"L2Transaction":{"title":"L2Transaction","type":"object","description":"Raw L2 transaction as defined in /lib/naive.hoon","required":["sig","tx","from"],"properties":{"sig":{"type":"string","title":"Signature","description":"Hex-encoded signature"},"from":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}},"tx":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}},"PendingTransaction":{"title":"PendingTransaction","type":"object","description":"Pending transaction in the Roller, waiting to be submitted to the Blockchain","required":["forced","tx","address"],"properties":{"forced":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"},"rawTx":{"title":"L2Transaction","type":"object","description":"Raw L2 transaction as defined in /lib/naive.hoon","required":["sig","tx","from"],"properties":{"sig":{"type":"string","title":"Signature","description":"Hex-encoded signature"},"from":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}},"tx":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}},"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"time":{"title":"Timestamp","type":"number"}}},"PendingTransactions":{"type":"array","title":"List of pending txs","items":{"title":"PendingTransaction","type":"object","description":"Pending transaction in the Roller, waiting to be submitted to the Blockchain","required":["forced","tx","address"],"properties":{"forced":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"},"rawTx":{"title":"L2Transaction","type":"object","description":"Raw L2 transaction as defined in /lib/naive.hoon","required":["sig","tx","from"],"properties":{"sig":{"type":"string","title":"Signature","description":"Hex-encoded signature"},"from":{"title":"From","type":"object","description":"Ship that sends the transaction and type of Ethereum address that controls it","required":["ship","proxy"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"proxy":{"title":"Proxy","oneOf":[{"pattern":"/^own$/","type":"string","title":"OwnershipAddress"},{"pattern":"/^spawn$/","type":"string","title":"SpawnProxy"},{"pattern":"/^vote$/","type":"string","title":"VotingProxy"},{"pattern":"/^manage$/","type":"string","title":"ManagementProxy"},{"pattern":"/^transfer$/","type":"string","title":"TransferProxy"}]}}},"tx":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]}}},"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"time":{"title":"Timestamp","type":"number"}}}},"L2Data":{"title":"L2Data","description":"Data requiered for a L2 Transaction","oneOf":[{"title":"TransferPointParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"reset":{"type":"boolean","title":"Reset"}}},{"title":"SpawnParams","type":"object","required":["address","ship"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"ConfigureKeysParams","type":"object","required":["encrypt","auth","cryptoSuite","breach"],"properties":{"encrypt":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"cryptoSuite":{"type":"string","title":"CryptoSuite"},"breach":{"type":"boolean","title":"Breach"}}},{"title":"SponsorshipParams","type":"object","required":["ship"],"properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},{"title":"AddressParams","type":"object","required":["address"],"properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}]},"Ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"NextBatch":{"title":"NextBatch","type":"number","description":"Timestamp of when the next roll of L2 txs will be sent out"},"Timestamp":{"title":"Timestamp","type":"number"},"Config":{"title":"Config","description":"A Roller Config","type":"object","required":["nextBatch","frequency","rollerResendTime","azimuthRefreshRate","rollerUpdateRate","chainId","contract"],"properties":{"nextBatch":{"title":"NextBatch","type":"number","description":"Timestamp of when the next roll of L2 txs will be sent out"},"frequency":{"type":"number","title":"Frequency","description":"How often the Roller sends out a new batch"},"rollerResendTime":{"type":"number","title":"RollerResendTime","description":"How ofthen the Roller retries to send a batch"},"rollerUpdateRate":{"type":"number","title":"RollerUpdateRate","description":"How ofthen the Roller updates its state"},"azimuthRefreshRate":{"type":"number","title":"AzimuthRefreshRate","description":"How often the Azimuth agent checks for L1 updates"},"chainId":{"type":"number","title":"ChainId","description":"For more info: https://chainid.network/"},"contract":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}},"DNS":{"title":"ListOfDNS","description":"A list of DNS","type":"array","items":{"type":"string","title":"DNS"}},"Success":{"title":"Success","type":"string","description":"Always returns \"ok\""},"Hash":{"title":"Hash","type":"string","description":"Keccak-256 (not the standardized SHA3-256) of the given data."},"NaiveState":{"title":"NaiveState","description":"L2 Naive State","type":"object","required":["points","operators","dns"],"properties":{"points":{"type":"array","title":"NaivePoints","items":{"type":"object","title":"NaivePoint","properties":{"ship":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]},"point":{"title":"L2Point","type":"object","properties":{"dominion":{"type":"string","title":"Dominion","description":"One of: l1, l2, spawn"},"network":{"title":"Networking","type":"object","required":["keys","rift","sponsor"],"properties":{"keys":{"title":"Keys","type":"object","required":["life","suite","auth","crypto"],"properties":{"life":{"type":"string","title":"Life"},"suite":{"type":"string","title":"CryptoSuite"},"auth":{"type":"string","title":"Auth","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"},"crypto":{"type":"string","title":"Crypto","pattern":"^0x[0-9a-f]{64}$","description":"^0x[0-9a-f]{64}$"}}},"rift":{"type":"string","title":"Rift"},"sponsor":{"title":"Sponsor","type":"object","properties":{"has":{"type":"boolean","title":"has"},"who":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"escape":{"title":"Ship","description":"An Azimuth Ship","anyOf":[{"type":"string","title":"Patp","default":"~wanzod","description":"patp-encoded string with leading ~"},{"type":"number","title":"Number","description":"Number representing a ship"}]}}},"ownership":{"title":"Ownership","type":"object","properties":{"owner":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"spawnProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"managementProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"votingProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}},"transferProxy":{"type":"object","title":"ProxyObject","properties":{"address":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"},"nonce":{"type":"number","title":"Nonce"}}}}}}}}}},"operators":{"type":"array","title":"Operators","items":{"type":"object","title":"Operator","properties":{"operator":{"type":"string","title":"OperatorAddress"},"addresses":{"type":"array","title":"OperatorAddresses","items":{"title":"eth-address","description":"hex encoded address","type":"string","pattern":"^0x[0-9a-f]{40}$"}}}}},"dns":{"title":"ListOfDNS","description":"A list of DNS","type":"array","items":{"type":"string","title":"DNS"}}}},"Force":{"title":"Force","description":"If true, forces the Roller to include this transaction, even if it fails to validate.","type":"boolean"}}},"externalDocs":{"url":"https://urbit.org/docs/azimuth/l2","description":"Documentation of the technical details of naive rollups."}} ;
  public transport: HTTPTransport | WebSocketTransport | PostMessageWindowTransport | PostMessageIframeTransport;
  private validator: MethodCallValidator;
  private timeout: number | undefined;

  constructor(options: Options) {

    if (options.transport === undefined || options.transport.type === undefined) {
      throw new Error("Invalid constructor params");
    }
    const {type, host, port, protocol} = options.transport;
    let path = options.transport.path || "";
    if(path && path[0] !== "/") {
        path = "/" + path;
    }
    switch (type) {
      case 'http':
      case 'https':
        this.transport = new HTTPTransport((protocol || type) + "://" + host + ":" + port + path);
        break;
      case 'websocket':
        this.transport = new WebSocketTransport((protocol || "ws://") + host + ":" + port + path);
        break;
      case 'postmessageiframe':
        this.transport = new PostMessageIframeTransport(protocol + "://" + host + ":" + port + path);
        break;
      case 'postmessagewindow':
        this.transport = new PostMessageWindowTransport(protocol + "://" + host + ":" + port + path);
        break;
      default:
        throw new Error("unsupported transport");
        break;
    }
    this.rpc = new Client(new RequestManager([this.transport]));
    this.validator = new MethodCallValidator(RollerRPCAPI.openrpcDocument);
  }
  /**
   * Adds a JSONRPC notification handler to handle receiving notifications.
   * @example
   * myClient.onNotification((data)=>console.log(data));
   */
  public onNotification(callback: (data: any) => void) {
    this.rpc.onNotification(callback);
  }

  /**
   * Adds an optional JSONRPCError handler to handle receiving errors that cannot be resolved to a specific request
   * @example
   * myClient.onError((err: JSONRPCError)=>console.log(err.message));
   */
  public onError(callback: (data: JSONRPCError) => void) {
     this.rpc.onError(callback);
  }

  /**
   * Sets a default timeout in ms for all requests excluding notifications.
   * @example
   * // 20s timeout
   * myClient.setDefaultTimeout(20000);
   * // Removes timeout from request
   * myClient.setDefaultTimeout(undefined);
   */
   public setDefaultTimeout(ms?: number) {
    this.timeout = ms;
  }

  /**
   * Initiates [[RollerRPCAPI.startBatch]] in order to build a batch call.
   *
   * Subsequent calls to [[RollerRPCAPI.request]] will be added to the batch.
   * Once [[RollerRPCAPI.stopBatch]] is called, the promises for the [[RollerRPCAPI.request]]
   * will then be resolved.  If there is already a batch in progress this method is a noop.
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public startBatch(): void {
    return this.rpc.startBatch();
  }

  /**
   * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
   *
   * stopBatch will send the [[RollerRPCAPI]] calls made since the last [[RollerRPCAPI.startBatch]] call. For
   * that reason, [[RollerRPCAPI.startBatch]] MUST be called before [[RollerRPCAPI.stopBatch]].
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public stopBatch(): void {
    return this.rpc.stopBatch();
  }

  private request(methodName: string, params: any[]): Promise<any> {
    const methodObject = _.find((RollerRPCAPI.openrpcDocument.methods as MethodObject[]), ({name}) => name === methodName) as MethodObject;
    const notification = methodObject.result ? false : true;
    const openRpcMethodValidationErrors = this.validator.validate(methodName, params);
    if ( openRpcMethodValidationErrors instanceof MethodNotFoundError || openRpcMethodValidationErrors.length > 0) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (methodObject.paramStructure && methodObject.paramStructure === "by-name") {
      rpcParams = _.zipObject(_.map(methodObject.params, "name"), params);
    } else {
      rpcParams = params;
    }
    if (notification) {
      return this.rpc.notify({method: methodName, params: rpcParams});
    }
    return this.rpc.request({method: methodName, params: rpcParams}, this.timeout);
  }

  
  /**
   * Retrieves Azimuth Point data for a specific ship
   */
  // tslint:disable-next-line:max-line-length
  public getPoint: GetPoint = (...params) => {
    return this.request("getPoint", params);
  }
  
  /**
   * Returns all the ships controlled by an ethereum address
   */
  // tslint:disable-next-line:max-line-length
  public getShips: GetShips = (...params) => {
    return this.request("getShips", params);
  }
  
  /**
   * Transfers a point to an ethereum address
   */
  // tslint:disable-next-line:max-line-length
  public transferPoint: TransferPoint = (...params) => {
    return this.request("transferPoint", params);
  }
  
  /**
   * Spawns a ship to an Ethereum Address
   */
  // tslint:disable-next-line:max-line-length
  public spawn: Spawn = (...params) => {
    return this.request("spawn", params);
  }
  
  /**
   * Configure Keys
   */
  // tslint:disable-next-line:max-line-length
  public configureKeys: ConfigureKeys = (...params) => {
    return this.request("configureKeys", params);
  }
  
  /**
   * Request escaping to a different sponsor
   */
  // tslint:disable-next-line:max-line-length
  public escape: Escape = (...params) => {
    return this.request("escape", params);
  }
  
  /**
   * Cancel request to escape
   */
  // tslint:disable-next-line:max-line-length
  public cancelEscape: CancelEscape = (...params) => {
    return this.request("cancelEscape", params);
  }
  
  /**
   * Adopt ship
   */
  // tslint:disable-next-line:max-line-length
  public adopt: Adopt = (...params) => {
    return this.request("adopt", params);
  }
  
  /**
   * Detach ship
   */
  // tslint:disable-next-line:max-line-length
  public detach: Detach = (...params) => {
    return this.request("detach", params);
  }
  
  /**
   * Reject ship
   */
  // tslint:disable-next-line:max-line-length
  public reject: Reject = (...params) => {
    return this.request("reject", params);
  }
  
  /**
   * Set Management Proxy
   */
  // tslint:disable-next-line:max-line-length
  public setManagementProxy: SetManagementProxy = (...params) => {
    return this.request("setManagementProxy", params);
  }
  
  /**
   * Set Spawn Proxy
   */
  // tslint:disable-next-line:max-line-length
  public setSpawnProxy: SetSpawnProxy = (...params) => {
    return this.request("setSpawnProxy", params);
  }
  
  /**
   * Set Transfer Proxy
   */
  // tslint:disable-next-line:max-line-length
  public setTransferProxy: SetTransferProxy = (...params) => {
    return this.request("setTransferProxy", params);
  }
  
  /**
   * Gets all pending transactions in the roller
   */
  // tslint:disable-next-line:max-line-length
  public getAllPending: GetAllPending = (...params) => {
    return this.request("getAllPending", params);
  }
  
  /**
   * Gets all pending transactions in the roller, by ship
   */
  // tslint:disable-next-line:max-line-length
  public getPendingByShip: GetPendingByShip = (...params) => {
    return this.request("getPendingByShip", params);
  }
  
  /**
   * Gets all pending transactions in the roller, by address
   */
  // tslint:disable-next-line:max-line-length
  public getPendingByAddress: GetPendingByAddress = (...params) => {
    return this.request("getPendingByAddress", params);
  }
  
  /**
   * Gets the pending transaction in the roller that corresponds to the given hash 
   */
  // tslint:disable-next-line:max-line-length
  public getPendingTx: GetPendingTx = (...params) => {
    return this.request("getPendingTx", params);
  }
  
  /**
   * Gets all spawned points by a star or galaxy
   */
  // tslint:disable-next-line:max-line-length
  public getSpawned: GetSpawned = (...params) => {
    return this.request("getSpawned", params);
  }
  
  /**
   * Gets all points that haven't been spawned by a star or galaxy
   */
  // tslint:disable-next-line:max-line-length
  public getUnspawned: GetUnspawned = (...params) => {
    return this.request("getUnspawned", params);
  }
  
  /**
   * Returns the number of points that haven't been spawned by a star or galaxy
   */
  // tslint:disable-next-line:max-line-length
  public spawnsRemaining: SpawnsRemaining = (...params) => {
    return this.request("spawnsRemaining", params);
  }
  
  /**
   * Timestamp of when the next L2 batch will be submitted
   */
  // tslint:disable-next-line:max-line-length
  public whenNextBatch: WhenNextBatch = (...params) => {
    return this.request("whenNextBatch", params);
  }
  
  /**
   * Timestamp of when the quota for submitting L2 transactions will be reset
   */
  // tslint:disable-next-line:max-line-length
  public whenNextSlice: WhenNextSlice = (...params) => {
    return this.request("whenNextSlice", params);
  }
  
  /**
   * Status of an L2 transaction submitted to the Roller
   */
  // tslint:disable-next-line:max-line-length
  public getTransactionStatus: GetTransactionStatus = (...params) => {
    return this.request("getTransactionStatus", params);
  }
  
  /**
   * Returns status, hash and type of all L2 tx submitted by an ethereum address,
   */
  // tslint:disable-next-line:max-line-length
  public getHistory: GetHistory = (...params) => {
    return this.request("getHistory", params);
  }
  
  /**
   * Latest nonce (counting pending transactions) for the proxy of the given ship
   */
  // tslint:disable-next-line:max-line-length
  public getNonce: GetNonce = (...params) => {
    return this.request("getNonce", params);
  }
  
  /**
   * Cancels a transaction that hasn't been sent out
   */
  // tslint:disable-next-line:max-line-length
  public cancelTransaction: CancelTransaction = (...params) => {
    return this.request("cancelTransaction", params);
  }
  
  /**
   * Returns configuration parameters of the Roller
   */
  // tslint:disable-next-line:max-line-length
  public getRollerConfig: GetRollerConfig = (...params) => {
    return this.request("getRollerConfig", params);
  }
  
  /**
   * Naive Rollup DNSs
   */
  // tslint:disable-next-line:max-line-length
  public getDns: GetDns = (...params) => {
    return this.request("getDns", params);
  }
  
  /**
   * Returns the hash of the serialized signature and raw bytes of the l2 tx. Used as unique identifier of a tx submitted to a L2 roller
   */
  // tslint:disable-next-line:max-line-length
  public hashRawTransaction: HashRawTransaction = (...params) => {
    return this.request("hashRawTransaction", params);
  }
  
  /**
   * DEPRECATED: Currently equivalent to prepareForSigning.
   */
  // tslint:disable-next-line:max-line-length
  public hashTransaction: HashTransaction = (...params) => {
    return this.request("hashTransaction", params);
  }
  
  /**
   * Returns a hash of the unsigned L2 transaction, following the format found at https://urbit.org/docs/azimuth/l2/bytestring#unsigned
   */
  // tslint:disable-next-line:max-line-length
  public getUnsignedTx: GetUnsignedTx = (...params) => {
    return this.request("getUnsignedTx", params);
  }
  
  /**
   * Returns a serialized L2 transaction, with the appropiate headers, and reversed endianness. Useful to be used together with, for example, Metamask personal_sign method
   */
  // tslint:disable-next-line:max-line-length
  public prepareForSigning: PrepareForSigning = (...params) => {
    return this.request("prepareForSigning", params);
  }
  
  /**
   * Returns all the ships controlled by an ethereum address as owner proxy
   */
  // tslint:disable-next-line:max-line-length
  public getOwnedPoints: GetOwnedPoints = (...params) => {
    return this.request("getOwnedPoints", params);
  }
  
  /**
   * Returns all the ships controlled by an ethereum address as transfer proxy
   */
  // tslint:disable-next-line:max-line-length
  public getTransferringFor: GetTransferringFor = (...params) => {
    return this.request("getTransferringFor", params);
  }
  
  /**
   * Returns all the ships controlled by an ethereum address as manage proxy
   */
  // tslint:disable-next-line:max-line-length
  public getManagerFor: GetManagerFor = (...params) => {
    return this.request("getManagerFor", params);
  }
  
  /**
   * Returns all the ships controlled by an ethereum address as voting proxy
   */
  // tslint:disable-next-line:max-line-length
  public getVotingFor: GetVotingFor = (...params) => {
    return this.request("getVotingFor", params);
  }
  
  /**
   * Returns all the ships controlled by an ethereum address as spawn proxy
   */
  // tslint:disable-next-line:max-line-length
  public getSpawningFor: GetSpawningFor = (...params) => {
    return this.request("getSpawningFor", params);
  }
  
  /**
   * Naive State
   */
  // tslint:disable-next-line:max-line-length
  public getNaiveState: GetNaiveState = (...params) => {
    return this.request("getNaiveState", params);
  }
  
  /**
   * Predicted Naive State
   */
  // tslint:disable-next-line:max-line-length
  public getPredictedState: GetPredictedState = (...params) => {
    return this.request("getPredictedState", params);
  }
  
  /**
   * Retrieves sponsees of the given ship, together with a list of points requesting to be sponsored
   */
  // tslint:disable-next-line:max-line-length
  public getSponsoredPoints: GetSponsoredPoints = (...params) => {
    return this.request("getSponsoredPoints", params);
  }
  
  /**
   * Retrieves current number of L2 transactions this ship is allowed to send to the Roller
   */
  // tslint:disable-next-line:max-line-length
  public getRemainingQuota: GetRemainingQuota = (...params) => {
    return this.request("getRemainingQuota", params);
  }
  
  /**
   * Retrieves number of L2 transactions this ship is allowed to send to the Roller, per time slice
   */
  // tslint:disable-next-line:max-line-length
  public getAllowance: GetAllowance = (...params) => {
    return this.request("getAllowance", params);
  }
  
}
export default RollerRPCAPI;
