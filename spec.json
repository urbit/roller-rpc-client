{
  "openrpc": "1.2.6",
  "info": {
    "version": "0.1.16",
    "title": "Roller RPC API",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080/v1/roller",
      "name": "Roller Local",
      "description": "This assumes `%roller-rpc.hoon` running on a test ship"
    },
    {
      "url": "http://localhost:8080/v1/azimuth",
      "name": "Azimuth Local",
      "description": "This assumes `%azimuth-rpc.hoon` running on a test ship"
    },
    {
      "url": "https://roller-tmp.urbit.org/v1/roller",
      "name": "Roller Ropsten",
      "description": "Roller Agent on Ropsten"
    },
    {
      "url": "https://roller-tmp.urbit.org/v1/azimuth",
      "name": "Azimuth Ropsten",
      "description": "Azimuth agent on Ropsten"
    },
    {
      "url": "https://roller.urbit.org/v1/roller",
      "name": "Roller Mainnet",
      "description": "Roller Agent on Mainnet"
    },
    {
      "url": "https://roller.urbit.org/v1/azimuth",
      "name": "Azimuth Mainnet",
      "description": "Azimuth agent on Mainnet"
    }
  ],
  "methods": [
    {
      "name": "getPoint",
      "summary": "Retrieves Azimuth Point data for a specific ship",
      "tags": [
        {
          "name": "point"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "ship",
          "description": "The @p of the planet (e.g. `~sampel-planet` or 256)",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "point",
        "description": "Expected response to be a valid request",
        "schema": {
          "$ref": "#/components/schemas/Point"
        }
      }
    },
    {
      "name": "getShips",
      "summary": "Returns all the ships controlled by an ethereum address",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "address",
          "summary": "Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      ],
      "result": {
        "name": "points",
        "schema": {
          "type": "array",
          "title": "Ships",
          "items": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      }
    },
    {
      "name": "transferPoint",
      "summary": "Transfers a point to an ethereum address",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/TransferPointParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "spawn",
      "summary": "Spawns a ship to an Ethereum Address",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/SpawnParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "configureKeys",
      "summary": "Configure Keys",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/ConfigureKeysParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "escape",
      "summary": "Request escaping to a different sponsor",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/SponsorshipParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "cancelEscape",
      "summary": "Cancel request to escape",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/SponsorshipParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "adopt",
      "summary": "Adopt ship",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/SponsorshipParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "detach",
      "summary": "Detach ship",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/SponsorshipParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "reject",
      "summary": "Reject ship",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/SponsorshipParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "setManagementProxy",
      "summary": "Set Management Proxy",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/AddressParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "setSpawnProxy",
      "summary": "Set Spawn Proxy",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/AddressParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "setTransferProxy",
      "summary": "Set Transfer Proxy",
      "tags": [
        {
          "name": "transaction"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/AddressParams"
          }
        }
      ],
      "result": {
        "name": "txHash",
        "description": "Hash of the raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "getAllPending",
      "summary": "Gets all pending transactions in the roller",
      "tags": [
        {
          "name": "pending"
        }
      ],
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "pending-transaction",
        "description": "List of pending transactions",
        "schema": {
          "$ref": "#/components/schemas/PendingTransactions"
        }
      }
    },
    {
      "name": "getPendingByShip",
      "summary": "Gets all pending transactions in the roller, by ship",
      "tags": [
        {
          "name": "pending"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "ship",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "pending-transaction",
        "description": "List of pending transactions",
        "schema": {
          "$ref": "#/components/schemas/PendingTransactions"
        }
      }
    },
    {
      "name": "getPendingByAddress",
      "summary": "Gets all pending transactions in the roller, by address",
      "tags": [
        {
          "name": "pending"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      ],
      "result": {
        "name": "pending-transaction",
        "description": "List of pending transactions",
        "schema": {
          "$ref": "#/components/schemas/PendingTransactions"
        }
      }
    },
    {
      "name": "getPendingTx",
      "summary": "Gets the pending transaction in the roller that corresponds to the given hash ",
      "tags": [
        {
          "name": "pending"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "hash",
          "schema": {
            "$ref": "#/components/schemas/Hash"
          }
        }
      ],
      "result": {
        "name": "pending-transaction",
        "description": "Pending transaction",
        "schema": {
          "$ref": "#/components/schemas/PendingTransaction"
        }
      }
    },
    {
      "name": "getSpawned",
      "summary": "Gets all spawned points by a star or galaxy",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "ship",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "spawned points",
        "description": "List of points as numbers",
        "schema": {
          "type": "array",
          "title": "SpawnedPoints",
          "items": {
            "type": "number",
            "title": "Number",
            "description": "Number representing a ship"
          }
        }
      }
    },
    {
      "name": "getUnspawned",
      "summary": "Gets all points that haven't been spawned by a star or galaxy",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "ship",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "unspawned points",
        "description": "List of points as numbers",
        "schema": {
          "type": "array",
          "title": "UnspawnedPoints",
          "items": {
            "type": "number",
            "title": "Number",
            "description": "Number representing a ship"
          }
        }
      }
    },
    {
      "name": "spawnsRemaining",
      "summary": "Returns the number of points that haven't been spawned by a star or galaxy",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "ship",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "spawns remaining",
        "description": "Number of spawns the point has left",
        "schema": {
          "type": "number",
          "title": "SpawnsLeft"
        }
      }
    },
    {
      "name": "whenNextBatch",
      "summary": "Timestamp of when the next L2 batch will be submitted",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "Next batch",
        "schema": {
          "$ref": "#/components/schemas/NextBatch"
        }
      }
    },
    {
      "name": "whenNextSlice",
      "summary": "Timestamp of when the quota for submitting L2 transactions will be reset",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "Next slice",
        "schema": {
          "$ref": "#/components/schemas/Timestamp"
        }
      }
    },
    {
      "name": "getTransactionStatus",
      "summary": "Status of an L2 transaction submitted to the Roller",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "hash",
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        }
      ],
      "result": {
        "name": "Status",
        "schema": {
          "$ref": "#/components/schemas/TransactionStatus"
        }
      }
    },
    {
      "name": "getHistory",
      "summary": "Returns status, hash and type of all L2 tx submitted by an ethereum address,",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "address",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      ],
      "result": {
        "name": "L2 Transactions",
        "schema": {
          "type": "array",
          "title": "TransactionHistory",
          "items": {
            "type": "object",
            "title": "RollerTransaction",
            "properties": {
              "ship": {
                "$ref": "#/components/schemas/Ship"
              },
              "status": {
                "$ref": "#/components/schemas/TransactionStatus"
              },
              "type": { "$ref": "#/components/schemas/TransactionType" },
              "hash": {
                "$ref": "#/components/schemas/hash32"
              },
              "time": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        }
      }
    },
    {
      "name": "getNonce",
      "summary": "Latest nonce (counting pending transactions) for the proxy of the given ship",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        }
      ],
      "result": {
        "name": "Nonce",
        "schema": {
          "$ref": "#/components/schemas/Nonce"
        }
      }
    },
    {
      "name": "cancelTransaction",
      "summary": "Cancels a transaction that hasn't been sent out",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "hash",
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        },
        {
          "name": "type",
          "schema": {
            "$ref": "#/components/schemas/TransactionType"
          }
        },
        {
          "name": "ship",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "success",
        "description": "Success response",
        "schema": {
          "$ref": "#/components/schemas/Success"
        }
      }
    },
    {
      "name": "getRollerConfig",
      "summary": "Returns configuration parameters of the Roller",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "Configuration",
        "schema": {
          "$ref": "#/components/schemas/Config"
        }
      }
    },
    {
      "name": "getDns",
      "summary": "Naive Rollup DNSs",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "List of Rollup DNS",
        "schema": {
          "$ref": "#/components/schemas/DNS"
        }
      }
    },
    {
      "name": "hashRawTransaction",
      "summary": "Returns the hash of the serialized signature and raw bytes of the l2 tx. Used as unique identifier of a tx submitted to a L2 roller",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "sig",
          "schema": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        {
          "name": "force",
          "schema": {
            "$ref": "#/components/schemas/Force"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "tx",
          "schema": {
            "$ref": "#/components/schemas/TransactionType"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/L2Data"
          }
        }
      ],
      "result": {
        "name": "Hash",
        "description": "Hash of the signature + L2 raw transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "hashTransaction",
      "deprecated": true,
      "summary": "DEPRECATED: Currently equivalent to prepareForSigning.",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "nonce",
          "schema": {
            "$ref": "#/components/schemas/Nonce"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "tx",
          "schema": {
            "$ref": "#/components/schemas/TransactionType"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/L2Data"
          }
        }
      ],
      "result": {
        "name": "Hash",
        "description": "Hash of the L2 transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "getUnsignedTx",
      "deprecated": true,
      "summary": "Returns a hash of the unsigned L2 transaction, following the format found at https://urbit.org/docs/azimuth/l2/bytestring#unsigned",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "nonce",
          "schema": {
            "$ref": "#/components/schemas/Nonce"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "tx",
          "schema": {
            "$ref": "#/components/schemas/TransactionType"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/L2Data"
          }
        }
      ],
      "result": {
        "name": "Hash",
        "description": "Hash of the L2 transaction",
        "schema": {
          "$ref": "#/components/schemas/Hash"
        }
      }
    },
    {
      "name": "prepareForSigning",
      "deprecated": true,
      "summary": "Returns a serialized L2 transaction, with the appropiate headers, and reversed endianness. Useful to be used together with, for example, Metamask personal_sign method",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "nonce",
          "schema": {
            "$ref": "#/components/schemas/Nonce"
          }
        },
        {
          "name": "from",
          "schema": {
            "$ref": "#/components/schemas/From"
          }
        },
        {
          "name": "tx",
          "schema": {
            "$ref": "#/components/schemas/TransactionType"
          }
        },
        {
          "name": "data",
          "schema": {
            "$ref": "#/components/schemas/L2Data"
          }
        }
      ],
      "result": {
        "name": "SerializedTx",
        "description": "Hex-encoded string representation of the L2 transaction",
        "schema": {
          "title": "SerializedTx",
          "type": "string"
        }
      }
    },
    {
      "name": "getOwnedPoints",
      "summary": "Returns all the ships controlled by an ethereum address as owner proxy",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "address",
          "summary": "Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      ],
      "result": {
        "name": "points",
        "schema": {
          "type": "array",
          "title": "Ships",
          "items": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      }
    },
    {
      "name": "getTransferringFor",
      "summary": "Returns all the ships controlled by an ethereum address as transfer proxy",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "address",
          "summary": "Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      ],
      "result": {
        "name": "points",
        "schema": {
          "type": "array",
          "title": "Ships",
          "items": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      }
    },
    {
      "name": "getManagerFor",
      "summary": "Returns all the ships controlled by an ethereum address as manage proxy",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "address",
          "summary": "Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      ],
      "result": {
        "name": "points",
        "schema": {
          "type": "array",
          "title": "Ships",
          "items": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      }
    },
    {
      "name": "getVotingFor",
      "summary": "Returns all the ships controlled by an ethereum address as voting proxy",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "address",
          "summary": "Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      ],
      "result": {
        "name": "points",
        "schema": {
          "type": "array",
          "title": "Ships",
          "items": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      }
    },
    {
      "name": "getSpawningFor",
      "summary": "Returns all the ships controlled by an ethereum address as spawn proxy",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "address",
          "summary": "Ethereum address (e.g. 0xf48062ae8bafd6ef19cd6cb89db93a0d0ca6ce26",
          "schema": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      ],
      "result": {
        "name": "points",
        "schema": {
          "type": "array",
          "title": "Ships",
          "items": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      }
    },
    {
      "name": "getNaiveState",
      "summary": "Naive State",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "Naive State",
        "schema": {
          "$ref": "#/components/schemas/NaiveState"
        }
      }
    },
    {
      "name": "getPredictedState",
      "summary": "Predicted Naive State",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "Predicted Naive State",
        "schema": {
          "$ref": "#/components/schemas/NaiveState"
        }
      }
    },
    {
      "name": "getSponsoredPoints",
      "summary": "Retrieves sponsees of the given ship, together with a list of points requesting to be sponsored",
      "tags": [
        {
          "name": "point"
        }
      ],
      "paramStructure": "by-name",
      "params": [
        {
          "name": "ship",
          "description": "The @p of the ponsor (e.g. `~sampel-planet` or 256)",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "points",
        "description": "Expected response to be a valid request",
        "schema": {
          "$ref": "#/components/schemas/SponsoredPoints"
        }
      }
    },
    {
      "name": "getRemainingQuota",
      "summary": "Retrieves current number of L2 transactions this ship is allowed to send to the Roller",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "ship",
          "description": "The @p of the planet (e.g. `~sampel-planet` or 256)",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "remaining quota",
        "description": "Remaining L2 quota",
        "schema": {
          "type": "number",
          "title": "RemainingQuota"
        }
      }
    },
    {
      "name": "getAllowance",
      "summary": "Retrieves number of L2 transactions this ship is allowed to send to the Roller, per time slice",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "ship",
          "description": "The @p of the planet (e.g. `~sampel-planet` or 256)",
          "schema": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      ],
      "result": {
        "name": "Allowance",
        "description": "Ship Allowance, per time slice",
        "schema": {
          "type": "number",
          "title": "Allowance"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "eth-address": {
        "title": "eth-address",
        "description": "hex encoded address",
        "type": "string",
        "pattern": "^0x[0-9a-f]{40}$"
      },
      "hash32": {
        "title": "hash32",
        "type": "string",
        "pattern": "^0x[0-9a-f]{64}$"
      },
      "Point": {
        "title": "L2Point",
        "type": "object",
        "properties": {
          "dominion": {
            "$ref": "#/components/schemas/Dominion"
          },
          "network": {
            "$ref": "#/components/schemas/Networking"
          },
          "ownership": {
            "$ref": "#/components/schemas/Ownership"
          }
        }
      },
      "SponsoredPoints": {
        "title": "SponsoredPoints",
        "type": "object",
        "properties": {
          "residents": {
            "type": "array",
            "title": "Residents",
            "items": { "$ref": "#/components/schemas/Ship" }
          },
          "requests": {
            "type": "array",
            "title": "SponsorRequests",
            "items": { "$ref": "#/components/schemas/Ship" }
          }
        }
      },
      "Ownership": {
        "title": "Ownership",
        "type": "object",
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/ProxyObject"
          },
          "spawnProxy": {
            "$ref": "#/components/schemas/ProxyObject"
          },
          "managementProxy": {
            "$ref": "#/components/schemas/ProxyObject"
          },
          "votingProxy": {
            "$ref": "#/components/schemas/ProxyObject"
          },
          "transferProxy": {
            "$ref": "#/components/schemas/ProxyObject"
          }
        }
      },
      "Keys": {
        "title": "Keys",
        "type": "object",
        "required": ["life", "suite", "auth", "crypto"],
        "properties": {
          "life": {
            "type": "string",
            "title": "Life"
          },
          "suite": {
            "$ref": "#/components/schemas/CryptoSuite"
          },
          "auth": {
            "$ref": "#/components/schemas/Auth"
          },
          "crypto": {
            "$ref": "#/components/schemas/Crypto"
          }
        }
      },
      "CryptoSuite": {
        "type": "string",
        "title": "CryptoSuite"
      },
      "Auth": {
        "type": "string",
        "title": "Auth",
        "pattern": "^0x[0-9a-f]{64}$",
        "description": "^0x[0-9a-f]{64}$"
      },
      "Crypto": {
        "type": "string",
        "title": "Crypto",
        "pattern": "^0x[0-9a-f]{64}$",
        "description": "^0x[0-9a-f]{64}$"
      },
      "Networking": {
        "title": "Networking",
        "type": "object",
        "required": ["keys", "rift", "sponsor"],
        "properties": {
          "keys": {
            "$ref": "#/components/schemas/Keys"
          },
          "rift": {
            "type": "string",
            "title": "Rift"
          },
          "sponsor": {
            "$ref": "#/components/schemas/Sponsor"
          },
          "escape": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      },
      "Sponsor": {
        "title": "Sponsor",
        "type": "object",
        "properties": {
          "has": {
            "type": "boolean",
            "title": "has"
          },
          "who": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      },
      "Nonce": { "type": "number", "title": "Nonce" },
      "ProxyObject": {
        "type": "object",
        "title": "ProxyObject",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/eth-address"
          },
          "nonce": {
            "$ref": "#/components/schemas/Nonce"
          }
        }
      },
      "Dominion": {
        "type": "string",
        "title": "Dominion",
        "description": "One of: l1, l2, spawn"
      },
      "Signature": {
        "type": "string",
        "title": "Signature",
        "description": "Hex-encoded signature"
      },
      "From": {
        "title": "From",
        "type": "object",
        "description": "Ship that sends the transaction and type of Ethereum address that controls it",
        "required": ["ship", "proxy"],
        "properties": {
          "ship": {
            "$ref": "#/components/schemas/Ship"
          },
          "proxy": {
            "title": "Proxy",
            "oneOf": [
              {
                "pattern": "/^own$/",
                "type": "string",
                "title": "OwnershipAddress"
              },
              {
                "pattern": "/^spawn$/",
                "type": "string",
                "title": "SpawnProxy"
              },
              {
                "pattern": "/^vote$/",
                "type": "string",
                "title": "VotingProxy"
              },
              {
                "pattern": "/^manage$/",
                "type": "string",
                "title": "ManagementProxy"
              },
              {
                "pattern": "/^transfer$/",
                "type": "string",
                "title": "TransferProxy"
              }
            ]
          }
        }
      },
      "TransferPointParams": {
        "title": "TransferPointParams",
        "type": "object",
        "required": ["address"],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/eth-address"
          },
          "reset": {
            "type": "boolean",
            "title": "Reset"
          }
        }
      },
      "SpawnParams": {
        "title": "SpawnParams",
        "type": "object",
        "required": ["address", "ship"],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/eth-address"
          },
          "ship": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      },
      "ConfigureKeysParams": {
        "title": "ConfigureKeysParams",
        "type": "object",
        "required": ["encrypt", "auth", "cryptoSuite", "breach"],
        "properties": {
          "encrypt": {
            "$ref": "#/components/schemas/Crypto"
          },
          "auth": {
            "$ref": "#/components/schemas/Auth"
          },
          "cryptoSuite": {
            "$ref": "#/components/schemas/CryptoSuite"
          },
          "breach": {
            "type": "boolean",
            "title": "Breach"
          }
        }
      },
      "SponsorshipParams": {
        "title": "SponsorshipParams",
        "type": "object",
        "required": ["ship"],
        "properties": {
          "ship": {
            "$ref": "#/components/schemas/Ship"
          }
        }
      },
      "AddressParams": {
        "title": "AddressParams",
        "type": "object",
        "required": ["address"],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      },
      "TransactionStatus": {
        "title": "TransactionStatus",
        "type": "string",
        "description": "One of: confirmed, pending, sending, confirmed, failed, unknown"
      },
      "TransactionType": {
        "type": "string",
        "title": "TransactionType",
        "description": "One of transfer-point, spawn, configure-keys, escape, cancel-escape, adopt, reject, detach, set-management-proxy, set-spawn-proxy, set-transfer-proxy"
      },
      "L2Transaction": {
        "title": "L2Transaction",
        "type": "object",
        "description": "Raw L2 transaction as defined in /lib/naive.hoon",
        "required": ["sig", "tx", "from"],
        "properties": {
          "sig": {
            "$ref": "#/components/schemas/Signature"
          },
          "from": {
            "$ref": "#/components/schemas/From"
          },
          "tx": { "$ref": "#/components/schemas/L2Data" }
        }
      },
      "PendingTransaction": {
        "title": "PendingTransaction",
        "type": "object",
        "description": "Pending transaction in the Roller, waiting to be submitted to the Blockchain",
        "required": ["forced", "tx", "address"],
        "properties": {
          "forced": {
            "$ref": "#/components/schemas/Force"
          },
          "rawTx": {
            "$ref": "#/components/schemas/L2Transaction"
          },
          "address": {
            "$ref": "#/components/schemas/eth-address"
          },
          "time": { "$ref": "#/components/schemas/Timestamp" }
        }
      },
      "PendingTransactions": {
        "type": "array",
        "title": "List of pending txs",
        "items": {
          "$ref": "#/components/schemas/PendingTransaction"
        }
      },
      "L2Data": {
        "title": "L2Data",
        "description": "Data requiered for a L2 Transaction",
        "oneOf": [
          { "$ref": "#/components/schemas/TransferPointParams" },
          { "$ref": "#/components/schemas/SpawnParams" },
          { "$ref": "#/components/schemas/ConfigureKeysParams" },
          { "$ref": "#/components/schemas/SponsorshipParams" },
          { "$ref": "#/components/schemas/AddressParams" }
        ]
      },
      "Ship": {
        "title": "Ship",
        "description": "An Azimuth Ship",
        "anyOf": [
          {
            "type": "string",
            "title": "Patp",
            "default": "~wanzod",
            "description": "patp-encoded string with leading ~"
          },
          {
            "type": "number",
            "title": "Number",
            "description": "Number representing a ship"
          }
        ]
      },
      "NextBatch": {
        "title": "NextBatch",
        "type": "number",
        "description": "Timestamp of when the next roll of L2 txs will be sent out"
      },
      "Timestamp": { "title": "Timestamp", "type": "number" },
      "Config": {
        "title": "Config",
        "description": "A Roller Config",
        "type": "object",
        "required": [
          "nextBatch",
          "frequency",
          "rollerResendTime",
          "azimuthRefreshRate",
          "rollerUpdateRate",
          "chainId",
          "contract"
        ],
        "properties": {
          "nextBatch": {
            "$ref": "#/components/schemas/NextBatch"
          },
          "frequency": {
            "type": "number",
            "title": "Frequency",
            "description": "How often the Roller sends out a new batch"
          },
          "rollerResendTime": {
            "type": "number",
            "title": "RollerResendTime",
            "description": "How ofthen the Roller retries to send a batch"
          },
          "rollerUpdateRate": {
            "type": "number",
            "title": "RollerUpdateRate",
            "description": "How ofthen the Roller updates its state"
          },
          "azimuthRefreshRate": {
            "type": "number",
            "title": "AzimuthRefreshRate",
            "description": "How often the Azimuth agent checks for L1 updates"
          },
          "chainId": {
            "type": "number",
            "title": "ChainId",
            "description": "For more info: https://chainid.network/"
          },
          "contract": {
            "$ref": "#/components/schemas/eth-address"
          }
        }
      },
      "DNS": {
        "title": "ListOfDNS",
        "description": "A list of DNS",
        "type": "array",
        "items": {
          "type": "string",
          "title": "DNS"
        }
      },
      "Success": {
        "title": "Success",
        "type": "string",
        "description": "Always returns \"ok\""
      },
      "Hash": {
        "title": "Hash",
        "type": "string",
        "description": "Keccak-256 (not the standardized SHA3-256) of the given data."
      },
      "NaiveState": {
        "title": "NaiveState",
        "description": "L2 Naive State",
        "type": "object",
        "required": ["points", "operators", "dns"],
        "properties": {
          "points": {
            "type": "array",
            "title": "NaivePoints",
            "items": {
              "type": "object",
              "title": "NaivePoint",
              "properties": {
                "ship": { "$ref": "#/components/schemas/Ship" },
                "point": { "$ref": "#/components/schemas/Point" }
              }
            }
          },
          "operators": {
            "type": "array",
            "title": "Operators",
            "items": {
              "type": "object",
              "title": "Operator",
              "properties": {
                "operator": { "type": "string", "title": "OperatorAddress" },
                "addresses": {
                  "type": "array",
                  "title": "OperatorAddresses",
                  "items": { "$ref": "#/components/schemas/eth-address" }
                }
              }
            }
          },
          "dns": { "$ref": "#/components/schemas/DNS" }
        }
      },
      "Force": {
        "title": "Force",
        "description": "If true, forces the Roller to include this transaction, even if it fails to validate.",
        "type": "boolean"
      }
    }
  },
  "externalDocs": {
    "url": "https://urbit.org/docs/azimuth/l2",
    "description": "Documentation of the technical details of naive rollups."
  }
}
